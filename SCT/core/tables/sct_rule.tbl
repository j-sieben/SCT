create table sct_rule(
  sru_id number default on null sct_seq.nextval, 
  sru_sgr_id number, 
  sru_name varchar2(200 byte), 
  sru_condition varchar2(4000 byte), 
  sru_sort_seq number, 
  sru_firing_items varchar2(300 byte),
  sru_active char(1) default 'Y',
  sru_fire_on_page_load char(1) default 'N',
  sru_has_error char(1) default 'N',
  constraint p_sct_rules primary key (sru_id),
  constraint r_sru_sgr_id foreign key (sru_sgr_id)
    references sct_rule_group (sgr_id) on delete cascade,
  constraint c_sru_active check(sru_active in ('Y', 'N')),
  constraint c_sru_has_error check(sru_has_error in ('Y', 'N')),
  constraint c_sru_fire_on_page_load check(sru_fire_on_page_load in ('Y', 'N'))
);

create index ix_r_sru_sgr_id on sct_rule(sru_sgr_id, sru_id);

create or replace trigger trg_bri_sct_rule 
  before insert on sct_rule
  for each row
begin
  /* TODO: refactor to IDENTITY-COLUMN if version 12c can be assumed! */
  :new.sru_id := coalesce(:new.sru_id, sct_seq.nextval);
end;
/

comment on table sct_rule is 'Table to store a single rule';
comment on column sct_rule.sru_id is 'PK, technical key';
comment on column sct_rule.sru_sgr_id is 'FK, reference to SCT_GROUP';
comment on column sct_rule.sru_name is 'Descriptive Name';
comment on column sct_rule.sru_condition is 'Condition, syntactically in the form of a partial where-clause';
comment on column sct_rule.sru_firing_items is 'List of page items that are referenced within sru_condition';
comment on column sct_rule.sru_sort_seq is 'Sortierkriterium, definiert Ausf√ºhrungsreihenfolge';
comment on column sct_rule.sru_active is 'Flag, das anzeigt, ob die Regel aktuell verwendet werden soll';
comment on column sct_rule.sru_fire_on_page_load is 'Flag, das anzeigt, ob diese Regel beim Initialisiern der Seite gefeuert werden soll';
comment on column sct_rule.sru_has_error is 'Flag, das anzeigt, ob diese Regel einen Fehler enthaelt oder nicht';
